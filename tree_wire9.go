// MACHINE GENERATED BY 'go generate' COMMAND
// TO EDIT A TYPE OR METHOD, COPY IT TO ANOTHER FILE IN THE PACKAGE
package git

import (
	"fmt"
	"io"
)

type tree struct {
	head toSpace
	size toNull
	leaf []*leaf
}

type leaf struct {
	mode toSpace
	file toNull
	hash []byte
}

func (z *tree) WriteBinary(w io.Writer) (err error) {
	defer func() {
		r := recover()
		if r == nil {
			return
		}
		if r, ok := r.(error); ok {
			err = r
			return
		}
		panic(r)
	}()

	if err := z.head.WriteBinary(w); err != nil {
		return err
	}

	if err := z.size.WriteBinary(w); err != nil {
		return err
	}

	for i := 0; i < len(z.leaf); i++ {
		if err := z.leaf[i].WriteBinary(w); err != nil {
			return err
		}
	}

	return nil
}

func (z *leaf) ReadBinary(r io.Reader) (err error) {
	defer func() {
		r := recover()
		if r == nil {
			return
		}
		if r, ok := r.(error); ok {
			err = r
			return
		}
		panic(r)
	}()
	if z == nil {
		return fmt.Errorf("ReadBinary: z nil")
	}

	if err := z.mode.ReadBinary(r); err != nil {
		return err
	}

	if err := z.file.ReadBinary(r); err != nil {
		return err
	}

	z.hash = make([]byte, 20)

	if n, err := r.Read(z.hash); err != nil || n != 20 {
		if err != nil {
			return err
		}
		return fmt.Errorf("expected %d bytes, got %d", 20, n)
	}

	return nil
}

func (z *leaf) WriteBinary(w io.Writer) (err error) {
	defer func() {
		r := recover()
		if r == nil {
			return
		}
		if r, ok := r.(error); ok {
			err = r
			return
		}
		panic(r)
	}()

	if err := z.mode.WriteBinary(w); err != nil {
		return err
	}

	if err := z.file.WriteBinary(w); err != nil {
		return err
	}

	{
		x := 20
		if n, err := w.Write(z.hash[:x]); err != nil || n != x {
			return err
		}
	}
	return nil
}
